import { Pool } from "pg";
import * as unzipper from "unzipper";
import { ConfigService } from "../config/config.service";
import { existsSync, rmdirSync, createReadStream, renameSync, promises as fsAsync } from "fs";
const mkdirp = require("mkdirp");

// TODO: We use low-level Postgres API here because we have to insert entities with predefined IDs into tables with autogenerated id values.
export class Importer {
  private pool: Pool;

  constructor(private readonly configService: ConfigService) {}

  public init() {
    const config = this.configService.typeOrmConfig as any;
    this.pool = new Pool({
      user: config.username,
      host: config.host,
      database: config.database,
      password: config.password,
      port: config.port,
    });
  }

  public async close() {
    await this.pool.end();
  }

  public async importFromZip(zipPath: string) {
    const srcFolder = "/data/import/tmp";
    if (existsSync(srcFolder)) {
      rmdirSync(srcFolder, { recursive: true });
    }

    try {
      await createReadStream(zipPath)
        .pipe(unzipper.Extract({ path: srcFolder }))
        .promise();

      await this.importGroups(srcFolder);
      await this.importUsers(srcFolder);
      await this.importMembers(srcFolder);
      await this.importSpecies(srcFolder);
      await this.importTags(srcFolder);
      await this.importProviders(srcFolder);
      await this.importProteins(srcFolder);
      await this.importClones(srcFolder);
      await this.importLots(srcFolder);
      await this.importConjugates(srcFolder);
      await this.importPanels(srcFolder);
      await this.importPanelElements(srcFolder);
      await this.importValidations(srcFolder);
      await this.importValidationFiles(srcFolder);
    } finally {
      await fsAsync.unlink(zipPath);
      await fsAsync.rmdir(srcFolder, { recursive: true });
    }
  }

  private async importGroups(srcFolder: string) {
    await this.pool.query('DELETE FROM "group"');

    const json = require(srcFolder + "/groups.json");
    const sql =
      'INSERT INTO "group" (id, name, institution, url, is_open, meta, created_at) VALUES($1, $2, $3, $4, $5, $6, $7)';

    for (const item of json) {
      const values = [item.id, item.name, item.institution, item.url, item.isOpen, item.meta, item.createdAt];
      await this.pool.query(sql, values);
    }
  }

  private async importUsers(srcFolder: string) {
    await this.pool.query('DELETE FROM "user"');

    const json = require(srcFolder + "/users.json");
    const sql =
      'INSERT INTO "user" (id, email, name, password, is_active, is_admin, meta, created_at, updated_at) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)';

    for (const item of json) {
      const values = [
        item.id,
        item.email,
        item.name,
        item.password,
        item.isActive,
        item.isAdmin,
        item.meta,
        item.createdAt,
        item.updatedAt,
      ];
      await this.pool.query(sql, values);
    }
  }

  private async importMembers(srcFolder: string) {
    await this.pool.query('DELETE FROM "member"');

    const json = require(srcFolder + "/members.json");
    const sql =
      'INSERT INTO "member" (id, group_id, user_id, role, all_panels, is_active, created_at, updated_at) VALUES($1, $2, $3, $4, $5, $6, $7, $8)';

    for (const item of json) {
      const values = [
        item.id,
        item.groupId,
        item.userId,
        item.role,
        item.allPanels,
        item.isActive,
        item.createdAt,
        item.updatedAt,
      ];
      await this.pool.query(sql, values);
    }
  }

  private async importSpecies(srcFolder: string) {
    await this.pool.query('DELETE FROM "species"');

    const json = require(srcFolder + "/species.json");
    const sql = 'INSERT INTO "species" (id, group_id, name, acronym, meta, created_at) VALUES($1, $2, $3, $4, $5, $6)';

    for (const item of json) {
      const values = [item.id, item.groupId, item.name, item.acronym, item.meta, item.createdAt];
      await this.pool.query(sql, values);
    }
  }

  private async importTags(srcFolder: string) {
    await this.pool.query('DELETE FROM "tag"');

    const json = require(srcFolder + "/tags.json");
    const sql =
      'INSERT INTO "tag" (id, group_id, name, description, is_metal, is_fluorophore, is_enzyme, is_biotin, is_other, mw, emission, excitation, status, meta, created_at) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)';

    for (const item of json) {
      const values = [
        item.id,
        item.groupId,
        item.name,
        item.description,
        item.isMetal,
        item.isFluorophore,
        item.isEnzyme,
        item.isBiotin,
        item.isOther,
        item.mw,
        item.emission,
        item.excitation,
        item.status,
        item.meta,
        item.createdAt,
      ];
      await this.pool.query(sql, values);
    }
  }

  private async importProviders(srcFolder: string) {
    await this.pool.query('DELETE FROM "provider"');

    const json = require(srcFolder + "/providers.json");
    const sql =
      'INSERT INTO "provider" (id, group_id, name, description, url, meta, created_at) VALUES($1, $2, $3, $4, $5, $6, $7)';

    for (const item of json) {
      const values = [item.id, item.groupId, item.name, item.description, item.url, item.meta, item.createdAt];
      await this.pool.query(sql, values);
    }
  }

  private async importProteins(srcFolder: string) {
    await this.pool.query('DELETE FROM "protein"');

    const json = require(srcFolder + "/proteins.json");
    const sql =
      'INSERT INTO "protein" (id, group_id, created_by, name, description, meta, created_at) VALUES($1, $2, $3, $4, $5, $6, $7)';

    for (const item of json) {
      const values = [item.id, item.groupId, item.createdBy, item.name, item.description, item.meta, item.createdAt];
      await this.pool.query(sql, values);
    }
  }

  private async importClones(srcFolder: string) {
    await this.pool.query('DELETE FROM "clone"');

    const json = require(srcFolder + "/clones.json");
    const sql =
      'INSERT INTO "clone" (id, group_id, created_by, protein_id, species_id, name, isotype, epitope, is_phospho, is_polyclonal, reactivity, application, is_archived, created_at, updated_at) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)';

    for (const item of json) {
      const values = [
        item.id,
        item.groupId,
        item.createdBy,
        item.proteinId,
        item.speciesId,
        item.name,
        item.isotype,
        item.epitope,
        item.isPhospho,
        item.isPolyclonal,
        item.reactivity,
        JSON.stringify(item.application),
        item.isArchived,
        item.createdAt,
        item.updatedAt,
      ];
      await this.pool.query(sql, values);
    }
  }

  private async importLots(srcFolder: string) {
    await this.pool.query('DELETE FROM "lot"');

    const json = require(srcFolder + "/lots.json");
    const sql =
      'INSERT INTO "lot" (id, group_id, created_by, clone_id, provider_id, name, reference, requested_by, approved_by, ordered_by, received_by, finished_by, number, status, purpose, url, price, note, requested_at, approved_at, ordered_at, received_at, finished_at, is_archived, created_at, updated_at) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26)';

    for (const item of json) {
      const values = [
        item.id,
        item.groupId,
        item.createdBy,
        item.cloneId,
        item.providerId,
        item.name,
        item.reference,
        item.requestedBy,
        item.approvedBy,
        item.orderedBy,
        item.receivedBy,
        item.finishedBy,
        item.number,
        item.status,
        item.purpose,
        item.url,
        item.price,
        item.note,
        item.requestedAt,
        item.approvedAt,
        item.orderedAt,
        item.receivedAt,
        item.finishedAt,
        item.isArchived,
        item.createdAt,
        item.updatedAt,
      ];
      await this.pool.query(sql, values);
    }
  }

  private async importConjugates(srcFolder: string) {
    await this.pool.query('DELETE FROM "conjugate"');

    const json = require(srcFolder + "/conjugates.json");
    const sql =
      'INSERT INTO "conjugate" (id, group_id, created_by, lot_id, tag_id, labeled_by, finished_by, status, tube_number, concentration, description, is_archived, finished_at, created_at, updated_at, custom_id) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)';

    for (const item of json) {
      const values = [
        item.id,
        item.groupId,
        item.createdBy,
        item.lotId,
        item.tagId,
        item.labeledBy,
        item.finishedBy,
        item.status,
        item.tubeNumber,
        item.concentration,
        item.description,
        item.isArchived,
        item.finishedAt,
        item.createdAt,
        item.updatedAt,
        item.customId,
      ];
      await this.pool.query(sql, values);
    }
  }

  private async importPanels(srcFolder: string) {
    await this.pool.query('DELETE FROM "panel"');

    const json = require(srcFolder + "/panels.json");
    const sql =
      'INSERT INTO "panel" (id, group_id, created_by, name, description, is_fluorophore, is_locked, application, is_archived, created_at, updated_at) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)';

    for (const item of json) {
      const values = [
        item.id,
        item.groupId,
        item.createdBy,
        item.name,
        item.description,
        item.isFluorophore,
        item.isLocked,
        item.application,
        item.isArchived,
        item.createdAt,
        item.updatedAt,
      ];
      await this.pool.query(sql, values);
    }
  }

  private async importPanelElements(srcFolder: string) {
    await this.pool.query('DELETE FROM "panel_element"');

    const json = require(srcFolder + "/panelElements.json");
    const sql =
      'INSERT INTO "panel_element" (id, panel_id, conjugate_id, dilution_type, concentration) VALUES($1, $2, $3, $4, $5)';

    for (const item of json) {
      const values = [item.id, item.panelId, item.conjugateId, item.dilutionType, item.concentration];
      await this.pool.query(sql, values);
    }
  }

  private async importValidations(srcFolder: string) {
    await this.pool.query('DELETE FROM "validation"');

    const json = require(srcFolder + "/validations.json");
    const sql =
      'INSERT INTO "validation" (id, group_id, created_by, clone_id, lot_id, conjugate_id, species_id, application, positive_control, negative_control, incubation_conditions, concentration, concentration_unit, tissue, fixation, fixation_notes, notes, status, antigen_retrieval_type, antigen_retrieval_time, antigen_retrieval_temperature, saponin, saponin_concentration, methanol_treatment, methanol_treatment_concentration, surface_staining, surface_staining_concentration, meta, is_archived, created_at, updated_at) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31)';

    for (const item of json) {
      const values = [
        item.id,
        item.groupId,
        item.createdBy,
        item.cloneId,
        item.lotId,
        item.conjugateId,
        item.speciesId,
        item.application,
        item.positiveControl,
        item.negativeControl,
        item.incubationConditions,
        item.concentration,
        item.concentrationUnit,
        item.tissue,
        item.fixation,
        item.fixationNotes,
        item.notes,
        item.status,
        item.antigenRetrievalType,
        item.antigenRetrievalTime,
        item.antigenRetrievalTemperature,
        item.saponin,
        item.saponinConcentration,
        item.methanolTreatment,
        item.methanolTreatmentConcentration,
        item.surfaceStaining,
        item.surfaceStainingConcentration,
        item.meta,
        item.isArchived,
        item.createdAt,
        item.updatedAt,
      ];
      await this.pool.query(sql, values);
    }
  }

  private async importValidationFiles(srcFolder: string) {
    await this.pool.query('DELETE FROM "validation_file"');

    const json = require(srcFolder + "/validationFiles.json");
    const sql =
      'INSERT INTO "validation_file"(id, validation_id, created_by, hash, size, name, extension, description, meta, created_at) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)';

    for (const item of json) {
      const values = [
        item.id,
        item.validationId,
        item.createdBy,
        item.hash,
        item.size,
        item.name,
        item.extension,
        item.description,
        item.meta,
        item.createdAt,
      ];
      await this.pool.query(sql, values);

      const filename = `${item.hash}.${item.extension}`;
      const oldPath = `${srcFolder}/validationFiles/${filename}`;
      if (existsSync(oldPath)) {
        const groupId = item.validation.groupId;
        const dir = `/data/groups/${groupId}/uploads/validation/${item.validationId}`;
        if (!existsSync(dir)) {
          mkdirp.sync(dir);
        }
        const newPath = `${dir}/${filename}`;
        renameSync(oldPath, newPath);
      }
    }
  }
}
